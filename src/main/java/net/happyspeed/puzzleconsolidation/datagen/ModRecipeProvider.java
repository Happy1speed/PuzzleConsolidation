package net.happyspeed.puzzleconsolidation.datagen;

import net.fabricmc.fabric.api.datagen.v1.FabricDataOutput;
import net.fabricmc.fabric.api.datagen.v1.provider.FabricRecipeProvider;
import net.happyspeed.puzzleconsolidation.item.ModItems;
import net.minecraft.data.server.recipe.RecipeJsonProvider;
import net.minecraft.data.server.recipe.ShapedRecipeJsonBuilder;
import net.minecraft.item.Items;
import net.minecraft.recipe.book.RecipeCategory;
import net.minecraft.util.Identifier;

import java.util.List;
import java.util.function.Consumer;

public class ModRecipeProvider extends FabricRecipeProvider {

    public ModRecipeProvider(FabricDataOutput output) {
        super(output);
    }

    @Override
    public void generate(Consumer<RecipeJsonProvider> exporter) {
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.VAVGVNY, 1)
                .pattern("AVG")
                .pattern("DHZ")
                .pattern("CTL")
                .input('A', ModItems.ALEV)
                .input('V', ModItems.VET)
                .input('G', ModItems.GIVEL)
                .input('D', ModItems.DAVET)
                .input('H', ModItems.HEVAT)
                .input('Z', ModItems.ZAVIN)
                .input('C', ModItems.CHEVIT)
                .input('T', ModItems.TEVIT)
                .input('L', ModItems.LAVED)
                .criterion(hasItem(ModItems.LAVED), conditionsFromItem(ModItems.LAVED))
                .criterion(hasItem(ModItems.TEVIT), conditionsFromItem(ModItems.TEVIT))
                .criterion(hasItem(ModItems.CHEVIT), conditionsFromItem(ModItems.CHEVIT))
                .criterion(hasItem(ModItems.ZAVIN), conditionsFromItem(ModItems.ZAVIN))
                .criterion(hasItem(ModItems.HEVAT), conditionsFromItem(ModItems.HEVAT))
                .criterion(hasItem(ModItems.DAVET), conditionsFromItem(ModItems.DAVET))
                .criterion(hasItem(ModItems.GIVEL), conditionsFromItem(ModItems.GIVEL))
                .criterion(hasItem(ModItems.VET), conditionsFromItem(ModItems.VET))
                .criterion(hasItem(ModItems.ALEV), conditionsFromItem(ModItems.ALEV))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.VAVGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.CNEGVNY, 1)
                .pattern("YEA")
                .pattern("SWL")
                .pattern("QBJ")
                .input('Y', ModItems.YI)
                .input('E', ModItems.ER)
                .input('A', ModItems.SAN)
                .input('S', ModItems.SHI)
                .input('W', ModItems.WU)
                .input('L', ModItems.LIU)
                .input('Q', ModItems.QI)
                .input('B', ModItems.BA)
                .input('J', ModItems.JIU)
                .criterion(hasItem(ModItems.YI), conditionsFromItem(ModItems.YI))
                .criterion(hasItem(ModItems.ER), conditionsFromItem(ModItems.ER))
                .criterion(hasItem(ModItems.SAN), conditionsFromItem(ModItems.SAN))
                .criterion(hasItem(ModItems.SHI), conditionsFromItem(ModItems.SHI))
                .criterion(hasItem(ModItems.WU), conditionsFromItem(ModItems.WU))
                .criterion(hasItem(ModItems.LIU), conditionsFromItem(ModItems.LIU))
                .criterion(hasItem(ModItems.QI), conditionsFromItem(ModItems.QI))
                .criterion(hasItem(ModItems.BA), conditionsFromItem(ModItems.BA))
                .criterion(hasItem(ModItems.JIU), conditionsFromItem(ModItems.JIU))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.CNEGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.GREGVNY, 1)
                .pattern("ABG")
                .pattern("DEI")
                .pattern("ZVT")
                .input('A', ModItems.ALPHA)
                .input('B', ModItems.BETA)
                .input('G', ModItems.GAMMA)
                .input('D', ModItems.DELTA)
                .input('E', ModItems.EPSILON)
                .input('I', ModItems.DIGAMMA)
                .input('Z', ModItems.ZETA)
                .input('V', ModItems.ETA)
                .input('T', ModItems.THETA)
                .criterion(hasItem(ModItems.ALPHA), conditionsFromItem(ModItems.ALPHA))
                .criterion(hasItem(ModItems.BETA), conditionsFromItem(ModItems.BETA))
                .criterion(hasItem(ModItems.GAMMA), conditionsFromItem(ModItems.GAMMA))
                .criterion(hasItem(ModItems.DELTA), conditionsFromItem(ModItems.DELTA))
                .criterion(hasItem(ModItems.EPSILON), conditionsFromItem(ModItems.EPSILON))
                .criterion(hasItem(ModItems.DIGAMMA), conditionsFromItem(ModItems.DIGAMMA))
                .criterion(hasItem(ModItems.ZETA), conditionsFromItem(ModItems.ZETA))
                .criterion(hasItem(ModItems.ETA), conditionsFromItem(ModItems.ETA))
                .criterion(hasItem(ModItems.THETA), conditionsFromItem(ModItems.THETA))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.GREGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.FCNGVNY, 1)
                .pattern("EAO")
                .pattern("ZGU")
                .pattern("JXP")
                .input('E', ModItems.EAU)
                .input('A', ModItems.AIS)
                .input('O', ModItems.OIS)
                .input('Z', ModItems.EST)
                .input('G', ModItems.AZH)
                .input('U', ModItems.UIS)
                .input('J', ModItems.JAU)
                .input('X', ModItems.AUXX)
                .input('P', ModItems.PAS)
                .criterion(hasItem(ModItems.EAU), conditionsFromItem(ModItems.EAU))
                .criterion(hasItem(ModItems.AIS), conditionsFromItem(ModItems.AIS))
                .criterion(hasItem(ModItems.OIS), conditionsFromItem(ModItems.OIS))
                .criterion(hasItem(ModItems.EST), conditionsFromItem(ModItems.EST))
                .criterion(hasItem(ModItems.AZH), conditionsFromItem(ModItems.AZH))
                .criterion(hasItem(ModItems.UIS), conditionsFromItem(ModItems.UIS))
                .criterion(hasItem(ModItems.JAU), conditionsFromItem(ModItems.JAU))
                .criterion(hasItem(ModItems.AUXX), conditionsFromItem(ModItems.AUXX))
                .criterion(hasItem(ModItems.PAS), conditionsFromItem(ModItems.PAS))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.FCNGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.ZNMGVNY, 1)
                .pattern("POC")
                .pattern("MVL")
                .pattern("XYB")
                .input('P', ModItems.PRINCE)
                .input('O', ModItems.OVERSEER)
                .input('C', ModItems.CHANCELLOR)
                .input('M', ModItems.MAGISTRATE)
                .input('V', ModItems.VORTEX)
                .input('L', ModItems.COMMISSIONER)
                .input('X', ModItems.PRACTITIONER)
                .input('Y', ModItems.ORATOR)
                .input('B', ModItems.BUREAUCRAT)
                .criterion(hasItem(ModItems.PRINCE), conditionsFromItem(ModItems.PRINCE))
                .criterion(hasItem(ModItems.OVERSEER), conditionsFromItem(ModItems.OVERSEER))
                .criterion(hasItem(ModItems.CHANCELLOR), conditionsFromItem(ModItems.CHANCELLOR))
                .criterion(hasItem(ModItems.MAGISTRATE), conditionsFromItem(ModItems.MAGISTRATE))
                .criterion(hasItem(ModItems.VORTEX), conditionsFromItem(ModItems.VORTEX))
                .criterion(hasItem(ModItems.COMMISSIONER), conditionsFromItem(ModItems.COMMISSIONER))
                .criterion(hasItem(ModItems.PRACTITIONER), conditionsFromItem(ModItems.PRACTITIONER))
                .criterion(hasItem(ModItems.ORATOR), conditionsFromItem(ModItems.ORATOR))
                .criterion(hasItem(ModItems.BUREAUCRAT), conditionsFromItem(ModItems.BUREAUCRAT))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.ZNMGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.GEVGVNY, 1)
                .pattern("CRF")
                .pattern("LXB")
                .pattern("SUM")
                .input('C', ModItems.COUNT)
                .input('R', ModItems.REDUX)
                .input('F', ModItems.FRAME)
                .input('L', ModItems.LIBRA)
                .input('X', ModItems.RADIX)
                .input('B', ModItems.BASAL)
                .input('S', ModItems.SEVEN)
                .input('U', ModItems.COROB)
                .input('M', ModItems.MOTIV)
                .criterion(hasItem(ModItems.COUNT), conditionsFromItem(ModItems.COUNT))
                .criterion(hasItem(ModItems.REDUX), conditionsFromItem(ModItems.REDUX))
                .criterion(hasItem(ModItems.FRAME), conditionsFromItem(ModItems.FRAME))
                .criterion(hasItem(ModItems.LIBRA), conditionsFromItem(ModItems.LIBRA))
                .criterion(hasItem(ModItems.RADIX), conditionsFromItem(ModItems.RADIX))
                .criterion(hasItem(ModItems.BASAL), conditionsFromItem(ModItems.BASAL))
                .criterion(hasItem(ModItems.SEVEN), conditionsFromItem(ModItems.SEVEN))
                .criterion(hasItem(ModItems.COROB), conditionsFromItem(ModItems.COROB))
                .criterion(hasItem(ModItems.MOTIV), conditionsFromItem(ModItems.MOTIV))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.GEVGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.ZRAGVNY, 1)
                .pattern("FIC")
                .pattern("EVP")
                .pattern("SOL")
                .input('F', ModItems.FIRE)
                .input('I', ModItems.IRE)
                .input('C', ModItems.IRATE)
                .input('E', ModItems.ENTIRE)
                .input('V', ModItems.INERT)
                .input('P', ModItems.PRICE)
                .input('S', ModItems.SPINE)
                .input('O', ModItems.ICE)
                .input('L', ModItems.SPIRE)
                .criterion(hasItem(ModItems.FIRE), conditionsFromItem(ModItems.FIRE))
                .criterion(hasItem(ModItems.IRE), conditionsFromItem(ModItems.IRE))
                .criterion(hasItem(ModItems.IRATE), conditionsFromItem(ModItems.IRATE))
                .criterion(hasItem(ModItems.ENTIRE), conditionsFromItem(ModItems.ENTIRE))
                .criterion(hasItem(ModItems.INERT), conditionsFromItem(ModItems.INERT))
                .criterion(hasItem(ModItems.PRICE), conditionsFromItem(ModItems.PRICE))
                .criterion(hasItem(ModItems.SPINE), conditionsFromItem(ModItems.SPINE))
                .criterion(hasItem(ModItems.ICE), conditionsFromItem(ModItems.ICE))
                .criterion(hasItem(ModItems.SPIRE), conditionsFromItem(ModItems.SPIRE))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.ZRAGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.PEVGVNY, 1)
                .pattern("TUR")
                .pattern("IDO")
                .pattern("NZV")
                .input('T', ModItems.TRANSPORT)
                .input('U', ModItems.UPKEEP)
                .input('R', ModItems.REWARD)
                .input('I', ModItems.TRANSPIRE)
                .input('D', ModItems.DOWNGRADE)
                .input('O', ModItems.RELENT)
                .input('N', ModItems.TRANSITION)
                .input('Z', ModItems.UPSHOT)
                .input('V', ModItems.REVERSE)
                .criterion(hasItem(ModItems.TRANSPORT), conditionsFromItem(ModItems.TRANSPORT))
                .criterion(hasItem(ModItems.UPKEEP), conditionsFromItem(ModItems.UPKEEP))
                .criterion(hasItem(ModItems.REWARD), conditionsFromItem(ModItems.REWARD))
                .criterion(hasItem(ModItems.TRANSPIRE), conditionsFromItem(ModItems.TRANSPIRE))
                .criterion(hasItem(ModItems.DOWNGRADE), conditionsFromItem(ModItems.DOWNGRADE))
                .criterion(hasItem(ModItems.RELENT), conditionsFromItem(ModItems.RELENT))
                .criterion(hasItem(ModItems.TRANSITION), conditionsFromItem(ModItems.TRANSITION))
                .criterion(hasItem(ModItems.UPSHOT), conditionsFromItem(ModItems.UPSHOT))
                .criterion(hasItem(ModItems.REVERSE), conditionsFromItem(ModItems.REVERSE))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.PEVGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.NKVGVNY, 1)
                .pattern("SGW")
                .pattern("LJU")
                .pattern("DMI")
                .input('S', ModItems.SIN)
                .input('G', ModItems.GRACE)
                .input('W', ModItems.WAGES)
                .input('L', ModItems.LISTEN)
                .input('J', ModItems.JUSTICE)
                .input('U', ModItems.SPEAK)
                .input('D', ModItems.DEATH)
                .input('M', ModItems.MERCY)
                .input('I', ModItems.INTERVENTION)
                .criterion(hasItem(ModItems.SIN), conditionsFromItem(ModItems.SIN))
                .criterion(hasItem(ModItems.GRACE), conditionsFromItem(ModItems.GRACE))
                .criterion(hasItem(ModItems.WAGES), conditionsFromItem(ModItems.WAGES))
                .criterion(hasItem(ModItems.LISTEN), conditionsFromItem(ModItems.LISTEN))
                .criterion(hasItem(ModItems.JUSTICE), conditionsFromItem(ModItems.JUSTICE))
                .criterion(hasItem(ModItems.SPEAK), conditionsFromItem(ModItems.SPEAK))
                .criterion(hasItem(ModItems.DEATH), conditionsFromItem(ModItems.DEATH))
                .criterion(hasItem(ModItems.MERCY), conditionsFromItem(ModItems.MERCY))
                .criterion(hasItem(ModItems.INTERVENTION), conditionsFromItem(ModItems.INTERVENTION))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.NKVGVNY)));
        ShapedRecipeJsonBuilder.create(RecipeCategory.MISC, ModItems.PUZZLE_ASPECT, 1)
                .pattern("SGW")
                .pattern("LJU")
                .pattern("DMI")
                .input('S', ModItems.VAVGVNY)
                .input('G', ModItems.CNEGVNY)
                .input('W', ModItems.GREGVNY)
                .input('L', ModItems.FCNGVNY)
                .input('J', ModItems.ZNMGVNY)
                .input('U', ModItems.GEVGVNY)
                .input('D', ModItems.ZRAGVNY)
                .input('M', ModItems.PEVGVNY)
                .input('I', ModItems.NKVGVNY)
                .criterion(hasItem(ModItems.VAVGVNY), conditionsFromItem(ModItems.VAVGVNY))
                .criterion(hasItem(ModItems.CNEGVNY), conditionsFromItem(ModItems.CNEGVNY))
                .criterion(hasItem(ModItems.GREGVNY), conditionsFromItem(ModItems.GREGVNY))
                .criterion(hasItem(ModItems.FCNGVNY), conditionsFromItem(ModItems.FCNGVNY))
                .criterion(hasItem(ModItems.ZNMGVNY), conditionsFromItem(ModItems.ZNMGVNY))
                .criterion(hasItem(ModItems.GEVGVNY), conditionsFromItem(ModItems.GEVGVNY))
                .criterion(hasItem(ModItems.ZRAGVNY), conditionsFromItem(ModItems.ZRAGVNY))
                .criterion(hasItem(ModItems.PEVGVNY), conditionsFromItem(ModItems.PEVGVNY))
                .criterion(hasItem(ModItems.NKVGVNY), conditionsFromItem(ModItems.NKVGVNY))
                .offerTo(exporter, new Identifier(getRecipeName(ModItems.PUZZLE_ASPECT)));
    }
}
